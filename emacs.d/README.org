* belak's emacs config

This config has been cobbled together from quite a few places.

Most notably, [[https://smf.io/dotfiles][Sean Farley's dotfiles]], [[https://github.com/syl20bnr/spacemacs][Spacemacs]], and various other
sources.

** Setup

The first thing which needs to be loaded is [[https://github.com/jwiegley/use-package][use-package]] so we can
organize everything a little bit better. =use-package= also includes
some useful tools for lazy-loading things when we need them to speed
up the startup time.

Note that we have to explicitly load them because =use-package= can't
handle that yet and we disabled autoloading everything in
=init.el=. =package-ensure-installed= is a convenience method which is
defined in =init.el=.

#+begin_src emacs-lisp
  (package-ensure-installed 'use-package)

  (eval-when-compile
    (defvar use-package-verbose t)
    (require 'use-package))

  (require 'diminish)
  (require 'bind-key)

  (setq use-package-always-ensure t)
#+end_src

** Utilities

Paradox is a replacement for =package-list-packages= offering a few
extra features. Note that we only load it on those commands because
it's something that only really matters when we manually start it up.

#+begin_src emacs-lisp
  (use-package paradox
    :commands
    paradox-list-packages
    paradox-enable
    :config
    (setq paradox-automatically-star t))
#+end_src

Magit is an amazing git wrapper which lets us do a whole ton of
different things.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

Make sure undo-tree is enabled.

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode 1))
#+end_src

Load up zx2c4's [[http://www.passwordstore.org/][pass]] utility so we can grab data out of it later.

#+begin_src emacs-lisp
  (use-package password-store)
#+end_src

=guide-key= provides a nice interface for showing prefix commands.

The currently defined prefixes are listed below.

| Prefix | Description                             |
|--------+-----------------------------------------|
| C-c    | Generic prefix for quite a few commands |
| C-x x  | Switching of different window modes     |

#+begin_src emacs-lisp
  (use-package guide-key
    :diminish guide-key-mode
    :config
    (guide-key-mode 1)
    (setq guide-key/guide-key-sequence '("C-c" "C-x x")
          guide-key/idle-delay 0.0
          guide-key/recursive-key-sequence-flag t))
#+end_src

** Appearance

Settings such as a default font, color scheme and modeline changes.
Note that the font should be overridden later, such as in platform
specific settings.

#+begin_src emacs-lisp
  (set-frame-font "Monospace 12")
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))

  ;;(setq-default indicate-buffer-boundaries 'left)
  (setq column-number-mode t
        line-number-mode t
        ;;tooltip-use-echo-area t
        tooltip-delay 0
        tooltip-short-delay 0)

  (blink-cursor-mode 0)
#+end_src

=diminish-major-mode= is based off of a snippet from [[https://github.com/sandhu/emacs.d/blob/master/lisp/teppoudo-diminish.el][Achint Sandhu's dotfiles]].

#+begin_src emacs-lisp
  (defmacro diminish-major-mode (mode new-name)
    `(add-hook (intern (concat (symbol-name ,mode) "-hook"))
               '(lambda () (setq mode-name ,new-name))))

  ;; Make the lisp modes a bit shorter
  (diminish-major-mode 'lisp-interaction-mode "λ»")
  (diminish-major-mode 'emacs-lisp-mode "Eλ")
  (diminish-major-mode 'lisp-mode "λ")
#+end_src

=smart-mode-line= is a much cleaner modeline with a few extra features.

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :config
    (setq sml/no-confirm-load-theme t)
    (sml/apply-theme 'respectful)
    (sml/setup))
#+end_src

Make sure the git gutter is loaded. Note that git-gutter-fringe
doesn't work in the terminal, so we define a fallback for that case.

#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :if window-system
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode +1))

  (use-package git-gutter
    :if (not window-system)
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode 1)
    (git-gutter:linum-setup))
#+end_src

** Basic setup

Set up some smarter defaults, and make sure that some useful
environment vars (like HOME and GOPATH) are copied into the emacs env.

This section was originally based off of [[https://github.com/technomancy/better-defaults/blob/d62a5813fa60d4c9425a795d85f956f0b8a663f8/better-defaults.el][better defaults]] but it has
since grown to be a bit more than that.

First we clean up the interface a bit, removing menus, toolbars and the scrollbar.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Because I often make silly window mistakes, we enable winner-mode so
we can undo them. We also enable windmove which makes it easier to
move between open windows.

#+begin_src emacs-lisp
  (winner-mode 1)

  (windmove-default-keybindings)
#+end_src

Because I want zap-to-char to not nuke the character we're zapping to,
we simply replace it with zap-up-to-char.

#+begin_src emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (global-set-key [remap zap-to-char] 'zap-up-to-char)
#+end_src

Make sure we actually use the clipboard we want because X is annoying
and has something along the lines of 3 clipboard buffers.

#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t)
#+end_src

Disable startup screen and just display the scratch buffer.

#+begin_src emacs-lisp
  (setq initial-buffer-choice t
        inhibit-startup-screen t)
#+end_src

Other things.

#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (require 'saveplace)
  (setq-default save-place t)

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)

  ;; Make mouse scrolling and scrolling in general a bit saner
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-follow-mouse t
        scroll-step 1)

  ;; Make sure files open in the existing emacs frame
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Other settings
  (setq apropos-do-all t                ; Make non-interactive functions show up when searching
        mouse-yank-at-point t           ; Mouse should yank on point, not click
        ring-bell-function 'ignore      ; Make sure there is no bell
        lazy-highlight-initial-delay 0) ; Remove the isearch highlight delay

  ;; Important files and directories
  (setq save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))

  ;; File related settings
  (setq require-final-newline t
        vc-follow-symlinks t
        load-prefer-newer t)
#+end_src

Load some useful variables from the shell. By default, it grabs HOME,
but we grab GOPATH as well for go.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (add-to-list 'exec-path-from-shell-variables "GOPATH")
    (exec-path-from-shell-initialize))
#+end_src

** Platform specifics

Font overrides as well as a few mac specific key binds to make emacs
easier to use. Additionally, in OSX we want to toggle fullscreen
because we want to be in full screen more often than not.

#+begin_src emacs-lisp
  (cond ((eq system-type 'gnu/linux)
         (setq x-gtk-use-system-tooltips nil)
         (set-frame-font "Terminus 8"))

        ((eq system-type 'darwin)
         (setq ns-use-native-fullscreen t
               mac-option-key-is-meta t
               mac-command-key-is-meta nil
               mac-command-modifier 'super
               mac-option-modifier 'meta)

         (set-frame-font "Source Code Pro 10")
         (toggle-frame-fullscreen)))
#+end_src

** File Navigation

Make sure to use ido everywhere. Because we're currently using helm,
this is disabled.

#+begin_src emacs-lisp
  (use-package smex
    :disabled t
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (setq ido-enable-flex-matching t)
    (use-package ido-ubiquitous
      :config
      (ido-ubiquitous-mode 1))
    (use-package ido-vertical-mode
      :config
      (ido-vertical-mode 1))
    (use-package flx-ido
      :config
      (flx-ido-mode 1)))
#+end_src

Make sure we store recent files. This lets helm do fancy things.

#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
#+end_src

Helm is a much fancier replacement for ido. There are a few settings
we override (such as reversing C-z and tab, but for the most part the
defaults are fine.

=helm-mini= is used in place of any buffer related helm functions as
we can make it use recentf.

#+begin_src emacs-lisp
  (use-package helm
    :demand
    :diminish helm-mode
    :bind
    ("M-x"     . helm-M-x)
    ("C-x b"   . helm-mini)
    ("C-x C-f" . helm-find-files)
    ("C-c o"   . helm-occur)
    ("M-/"     . helm-dabbrev)
    :config
    ;; Reverse tab and C-z
    (bind-keys :map helm-map
               ("<tab>" . helm-execute-persistent-action)
               ("C-z"   . helm-select-action))
    (helm-mode 1)
    (helm-autoresize-mode 1)

    ;; Turn on fuzzy matching for everything we can
    (setq helm-recentf-fuzzy-match t
          helm-completion-in-region-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-locate-fuzzy-match t
          helm-M-x-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-apropos-fuzzy-match t
          helm-lisp-fuzzy-completion t)

    (setq helm-ff-file-name-history-use-recentf t))
#+end_src

Perspective creates different views to switch between.

#+begin_src emacs-lisp
  (use-package perspective
    :config
    (persp-mode))
#+end_src

Project based navigation. I would be completely lost without this.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-global-mode)
    (use-package helm-projectile
      :config
      (helm-projectile-on)))
#+end_src

** Programming

Anything programming related goes in here. There are sections for
completion, general config and separate sections for each language.

*** General

Set a few things for prog-mode based major modes, such as line numbers
and trailing whitespace.

#+begin_src emacs-lisp
    (defun my-prog-mode-hook ()
      "Some simple programming settings"
      (interactive)
      (linum-mode)
      (setq show-trailing-whitespace t
            indicate-empty-lines t))

    (add-hook 'prog-mode-hook 'my-prog-mode-hook)
#+end_src

=fic-mode= makes sure I actually notice comments with TODO, FIXME and
XXX.

#+begin_src emacs-lisp
  (use-package fic-mode
    :diminish fic-mode
    :config
    (progn (add-hook 'prog-mode-hook 'turn-on-fic-mode)))
#+end_src

*** Completion

There are two main completion packages. =auto-complete= is older and a
bit rougher around the edges. =company= is newer and not everything
works with it yet, but at least for me it has a tendency to be more
stable.

#+begin_src emacs-lisp
  (use-package company
    :config
    ;(use-package company-go)
    (setq company-idle-delay 0)
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** Snippets

Not much to say here. We turn snippets on everywhere.

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+end_src

*** Syntax

Turn on syntax checking using flycheck. Because it has so many built
in, in most instances we won't even need to install a plugin.

Note that elpy doesn't have support for flycheck, so we use flymake
for python.

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+end_src

*** Evil Mode

Every once in a while, I miss vim, so this is here. =zenburn-color= is
a convenience function which we currently only use here in setting the
cursor color.

#+begin_src emacs-lisp
  (defun zenburn-color (name)
    (cdr (assoc name zenburn-colors-alist)))

  (use-package evil
    :config
    (zenburn-with-color-variables
      (setq evil-normal-state-cursor `(,(zenburn-color "zenburn-green") box))
      (setq evil-visual-state-cursor `(,(zenburn-color "zenburn-orange") box))
      (setq evil-insert-state-cursor `(,(zenburn-color "zenburn-green") bar))
      (setq evil-replace-state-cursor `(,(zenburn-color "zenburn-red") bar))
      (setq evil-operator-state-cursor `(,(zenburn-color "zenburn-red") hollow))))
#+end_src

*** Go

This enables most of the fairly standard things available in other go
setups. Simple completion and gofmt are the most important of those
features, at least to me.

#+begin_src emacs-lisp
  (use-package go-mode
    :mode "\\.go$"
    :config
    (load "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")
    (add-hook 'go-mode-hook 'go-oracle-mode)
    (add-hook 'before-save-hook 'gofmt-before-save)

    (use-package company-go
      :requires company
      :config
      (add-hook 'go-mode-hook (lambda ()
                                (set (make-local-variable 'company-backends) '(company-go))
                                (company-mode)))))
#+end_src

*** Lua

Another section where we don't need to say much. We make sure lua-mode
is installed and we turn it on for lua files.

#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua$")
#+end_src

*** Python

Enable elpy and force jedi to be used as the rpc backend so we can
have both rope and jedi installed. Elpy defaults to using the system
'python' binary so we force it to use python2.

#+begin_src emacs-lisp
  (use-package elpy
    :config
    (elpy-enable)
    (elpy-use-cpython "python2")
    (setq elpy-rpc-backend "jedi"))
#+end_src

*** Yaml

Enable syntax highlighting for yaml.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode "\\.yml$")
#+end_src

*** Web Dev

These are any packages useful for web dev.

Most of this section is just supporting additional formats, however
=rainbow-mode= is here so we can preview the actual colors in css.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :commands rainbow-mode)

  (use-package web-mode
    :mode "\\.jinja$")

  (use-package less-css-mode
    :mode "\\.less$")
#+end_src

** Org Mode

Make sure org mode is set up in a manner that doesn't suck. Meaning,
make code blocks act more like their native counterparts, enable fancy
indenting and allow for shift select.

If the extra require looks hacky, that's because it is. The =:demand=
makes sure the config runs because the package is already loaded to
run this config file. The =:diminish= keyword fails because
org-indent-mode does not exist by the time diminish is called.

#+begin_src emacs-lisp
  (use-package org
    :demand
    :mode ("\\.org$" . org-mode)
    :diminish org-indent-mode
    :init
    (require 'org-indent)
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-startup-indented t
          org-log-done t
          org-log-done-with-time t
          org-log-refile t
          org-refile-allow-creating-parent-nodes t
          org-refile-use-outline-path t
          org-support-shift-select t
          org-todo-keywords '("TODO" "STARTED" "WAITING" "|" "DONE")
          org-tag-alist '(("WORK" . ?w)
                          ("HOME" . ?h))
          org-agenda-files '("~/org/work.org"
                             "~/org/home.org"))
    :config
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right))
#+end_src

** IRC

This sets up the connection to my IRC bouncer. There are a few
additional packages that would be useful here, such as znc, but I
still prefer to keep my IRC in weechat, so this remains disabled for
now.

#+begin_src emacs-lisp
    (use-package erc
      :disabled t
      :requires
      tls
      erc-menu
      erc-hl-nicks
      znc
      :config
      (setq erc-prompt ">"
            znc-servers `(
                          ("znc.coded.io" "6697" t
                           ((
                             freenode
                             belak/freenode
                             ,(password-store-get "irc/freenode.net")))))))
#+end_src

** Custom

We still want to be able to have non-public configs, such as for
passwords and what not, so we put them in a separate file and load it,
but ignore errors, for instance if it doesn't exist.

This also makes it so customizations will go to this file and not to
the init.el, which we have version controlled.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+end_src

** Tasks

This section is all about stuff I'd like to get into my emacs init but
haven't found the time yet.

*** DONE Decide which git-gutter is better
CLOSED: [2015-06-16 Tue 10:55]
*** DONE Make git-gutter-fringe not run in terminal mode
    CLOSED: [2015-06-20 Sat 11:37]
We can also fall back to the regular git-gutter in this instance
*** DONE Learn yasnippets
    CLOSED: [2015-06-20 Sat 11:37]
*** DONE Setup for golang
CLOSED: [2015-06-16 Tue 10:56]
*** DONE Cleanup [[Leftovers]] section
    CLOSED: [2015-06-20 Sat 12:18]
*** DONE Finish reogranizing
    CLOSED: [2015-06-20 Sat 12:42]
*** DONE Fix org-indent-mode
CLOSED: [2015-06-22 Mon 01:29]
*** DONE Finish documenting
CLOSED: [2015-06-22 Mon 02:22]
*** DONE Make org-mode work well with yasnippets
CLOSED: [2015-06-22 Mon 01:31]
There was nothing to be done for this - tab already works. However,
tab inside code blocks does not currently work. I'm letting this go
for now.
*** DONE Make org-mode work well with windmove
CLOSED: [2015-06-22 Mon 01:35]
Looks like this was done a while back. Guess it's done now.
*** DONE Figure out why show-trailing-whitespace doesn't work
CLOSED: [2015-06-23 Tue 10:45]
Because it becomes buffer-local when set, we have to use setq-default,
not setq.
*** TODO Split up larger blocks, such as [[Basic setup]]
