* belak's emacs config

This config has been cobbled together from quite a few places.

** Package setup

use-package is used to organize imports in a better manner.
package-ensure-installed is defined in init.el

Note that we have to explicitly load them because use-package can't
handle that yet and we disabled autoloading everything in init.el

#+begin_src emacs-lisp
  (package-ensure-installed 'use-package)

  (eval-and-compile
    (defvar use-package-verbose t)
    (require 'use-package))

  (require 'diminish)
  (require 'bind-key)

  (setq use-package-always-ensure t)
#+end_src

While we're in the area, we also install paradox, a better package
interface and set up a few config options.

#+begin_src emacs-lisp
  (use-package paradox
    :commands
    paradox-list-packages
    paradox-enable
    :config
    (setq paradox-automatically-star t))
#+end_src

** Appearance settings

Settings such as a default font, color scheme and modeline changes.
Note that the font should be overridden later, such as in platform
specific settings.

#+begin_src emacs-lisp
  (set-frame-font "Monospace 12")
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))

  ;; https://github.com/sandhu/emacs.d/blob/master/lisp/teppoudo-diminish.el
  (defmacro diminish-major-mode (mode new-name)
    `(add-hook (intern (concat (symbol-name ,mode) "-hook"))
               '(lambda () (setq mode-name ,new-name))))

  ;; Make the lisp modes a bit shorter
  (diminish-major-mode 'lisp-interaction-mode "λ»")
  (diminish-major-mode 'emacs-lisp-mode "Eλ")
  (diminish-major-mode 'lisp-mode "λ")

  (setq column-number-mode t
        line-number-mode t)

  ;; Better mode-line
  (use-package smart-mode-line
    :config
    (setq sml/no-confirm-load-theme t)
    (sml/apply-theme 'respectful)
    (sml/setup))
#+end_src

** Basic setup

Set up some smarter defaults, and make sure that some useful
environment vars (like HOME and GOPATH) are copied into the emacs env.

#+begin_src emacs-lisp
  (use-package better-defaults)

  (setq initial-buffer-choice 't
        inhibit-startup-screen 't
        show-trailing-whitespace 't
        ring-bell-function 'ignore
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        ;mouse-wheel-progressive-speed nil
        mouse-wheel-follow-mouse 't
        vc-follow-symlinks 't
        scroll-step 1)

  ;; Grab some useful env vars from the shell
  (use-package exec-path-from-shell
    :config
    (add-to-list 'exec-path-from-shell-variables "GOPATH")
    (exec-path-from-shell-initialize))

  (use-package password-store)
#+end_src

** Platform specifics

Font overrides as well as a few mac specific key binds to make emacs
easier to use. Additionally, in OSX we want to toggle fullscreen
because we want to be in full screen more often than not.

#+begin_src emacs-lisp
  (cond ((eq system-type 'gnu/linux)
         (setq x-gtk-use-system-tooltips nil)
         (set-frame-font "Terminus 8"))

        ((eq system-type 'darwin)
         (setq ns-use-native-fullscreen t
               mac-option-key-is-meta t
               mac-command-key-is-meta nil
               mac-command-modifier 'super
               mac-option-modifier 'meta)

         (set-frame-font "Source Code Pro 10")
         (toggle-frame-fullscreen)))
#+end_src

** File Navigation

Make sure to use ido everywhere

#+begin_src emacs-lisp
  (use-package smex
    :disabled t
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (use-package ido-ubiquitous
      :config
      (ido-ubiquitous-mode 1))
    (use-package ido-vertical-mode
      :config
      (ido-vertical-mode 1))
    (use-package flx-ido
      :config
      (flx-ido-mode 1)))
#+end_src

Make sure we store recent files

#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
#+end_src

Helm is a slightly fancier replacement for ido

#+begin_src emacs-lisp
  (use-package helm
    :demand
    :diminish helm-mode
    :bind
    ("M-x"     . helm-M-x)
    ("C-x b"   . helm-mini)
    ("C-x C-f" . helm-find-files)
    ("C-c o"   . helm-occur)
    ("M-/"     . helm-dabbrev)
    :config
    ; Reverse tab and C-z
    (bind-keys :map helm-map
               ("<tab>" . helm-execute-persistent-action)
               ("C-z"   . helm-select-action))
    (helm-mode 1)
    (helm-autoresize-mode 1)
    (setq helm-ff-file-name-history-use-recentf t))
#+end_src

Project based navigation.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-global-mode)
    (use-package helm-projectile
      :config
      (helm-projectile-on)))
#+end_src

** Programming

Anything programming related goes in here. There are sections for
completion, general config and separate sections for each language.

*** General

Turn on line numbers everywhere aside from a few major modes and
highlight comments with TODO and similar things in them.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)

  (setq indicate-empty-lines t)

  (use-package fic-mode
        :diminish fic-mode
        :config
        (progn (add-hook 'prog-mode-hook 'turn-on-fic-mode)))
#+end_src

*** Completion

#+begin_src emacs-lisp
  (use-package company
    :config
    ;(use-package company-go)
    (setq company-idle-delay 0)
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** Go

#+begin_src emacs-lisp

#+end_src

*** Lua

#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua$")
#+end_src

*** Python

Enable elpy and force jedi to be used as the rpc backend so we can
have both rope and jedi installed. Elpy defaults to using the system
'python' binary so we force it to use python2.

Elpy is pretty slow starting up, so we replace elpy-enable with what
it actually does: run elpy-modules-global-init and add the actual mode
hook. This lets us wait until a python file is loaded to load elpy.

#+begin_src emacs-lisp
  (use-package elpy
    :mode ("\\.py$" . elpy-mode)
    :config
    (elpy-modules-global-init)
    (elpy-use-cpython "python2")
    (setq elpy-rpc-backend "jedi"))
#+end_src

** Org Mode

Make sure org mode is set up in a manner that doesn't suck. Meaning,
make code blocks act more like their native counterparts, enable fancy
indenting and allow for shift select.

#+begin_src emacs-lisp
  (use-package org
    :mode ("\\.org$" . org-mode)
    :config
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-indent-mode t
          org-startup-indented t
          org-log-done t
          org-log-done-with-time t
          org-support-shift-select t))
#+end_src

** IRC

#+begin_src emacs-lisp
    (use-package erc
      :disabled t
      :requires
      tls
      erc-menu
      erc-hl-nicks
      znc
      :config
      (setq erc-prompt ">"
            znc-servers `(
                          ("znc.coded.io" "6697" t
                           ((
                             freenode
                             belak/freenode
                             ,(password-store-get "irc/freenode.net")))))))
#+end_src

** Leftovers

#+begin_src emacs-lisp
  ;; Random utils
  (use-package magit
    :init
    (setq magit-last-seen-setup-instructions "1.4.0")
    :config
    (magit-auto-revert-mode -1))

  ;; Rainbow-mode
  (use-package rainbow-mode
    :commands rainbow-mode)

  ;; Better less support
  ;(require-package 'less-css-mode)

  ;; Golang
  ;(require-package 'go-mode)

  ;; Syntax checking
  ;(require-package 'flycheck)

  ;; Snippets
  ;(require-package 'yasnippet)

  (use-package git-gutter
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode 1)
    (git-gutter:linum-setup))
#+end_src

** Custom

We still want to be able to have non-public configs, such as for
passwords and what not, so we put them in a separate file and load it,
but ignore errors, for instance if it doesn't exist.

This also makes it so customizations will go to this file and not to
the init.el, which we have version controlled.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src
