* belak's emacs config

This config has been cobbled together from quite a few places.

Most notably, [[https://smf.io/dotfiles][Sean Farley's dotfiles]], [[https://github.com/syl20bnr/spacemacs][Spacemacs]], and various other
sources.

** Tasks

This section is all about stuff I'd like to get into my emacs init but
haven't found the time yet.

*** TODO Decide which git-gutter is better
*** TODO Learn yasnippets
*** TODO Setup for golang
*** TODO Finish reogranizing
*** TODO Cleanup [[Leftovers]] section
** Setup

The first thing which needs to be loaded is [[https://github.com/jwiegley/use-package][use-package]] so we can
organize everything a little bit better. =use-package= also includes
some useful tools for lazy-loading things when we need them to speed
up the startup time.

Note that we have to explicitly load them because =use-package= can't
handle that yet and we disabled autoloading everything in
=init.el=. =package-ensure-installed= is a convenience method which is
defined in =init.el=.

#+begin_src emacs-lisp
 (package-ensure-installed 'use-package)

  (eval-and-compile
    (defvar use-package-verbose t)
    (require 'use-package))

  (require 'diminish)
  (require 'bind-key)

  (setq use-package-always-ensure t)
#+end_src

** Utilities

Paradox is a replacement for =package-list-packages= offering a few
extra features. Note that we only load it on those commands because
it's something that only really matters when we manually start it up.

#+begin_src emacs-lisp
  (use-package paradox
    :commands
    paradox-list-packages
    paradox-enable
    :config
    (setq paradox-automatically-star t))
#+end_src

Magit is an amazing git wrapper which lets us do a whole ton of
different things.

#+begin_src emacs-lisp
  (use-package magit
    :init
    (setq magit-last-seen-setup-instructions "1.4.0")
    :config
    (magit-auto-revert-mode -1))
#+end_src

Make sure undo-tree is enabled.

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode 1))
#+end_src

** Appearance

Settings such as a default font, color scheme and modeline changes.
Note that the font should be overridden later, such as in platform
specific settings.

#+begin_src emacs-lisp
  (set-frame-font "Monospace 12")
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))

  (setq-default indicate-buffer-boundaries 'left)
  (setq column-number-mode t
        line-number-mode t
        tooltip-use-echo-area t
        tooltip-delay 0)
#+end_src

=diminish-major-mode= is based off of a snippet from [[https://github.com/sandhu/emacs.d/blob/master/lisp/teppoudo-diminish.el][Achint Sandhu's
dotfiles]]. 

#+begin_src emacs-lisp
  (defmacro diminish-major-mode (mode new-name)
    `(add-hook (intern (concat (symbol-name ,mode) "-hook"))
               '(lambda () (setq mode-name ,new-name))))

  ;; Make the lisp modes a bit shorter
  (diminish-major-mode 'lisp-interaction-mode "λ»")
  (diminish-major-mode 'emacs-lisp-mode "Eλ")
  (diminish-major-mode 'lisp-mode "λ")
#+end_src

=smart-mode-line= is a much cleaner modeline with a few extra features.

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :config
    (setq sml/no-confirm-load-theme t)
    (sml/apply-theme 'respectful)
    (sml/setup))
#+end_src

Make sure the git gutter is loaded

#+begin_src emacs-lisp
  (use-package git-gutter
    :disabled t
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode 1)
    (git-gutter:linum-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode +1))
#+end_src

** Basic setup

Set up some smarter defaults, and make sure that some useful
environment vars (like HOME and GOPATH) are copied into the emacs env.

#+begin_src emacs-lisp
  (use-package better-defaults)

  (setq initial-buffer-choice 't
        inhibit-startup-screen 't
        show-trailing-whitespace 't
        ring-bell-function 'ignore
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        ;mouse-wheel-progressive-speed nil
        mouse-wheel-follow-mouse 't
        vc-follow-symlinks 't
        scroll-step 1)

  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))

  ;; Grab some useful env vars from the shell
  (use-package exec-path-from-shell
    :config
    (add-to-list 'exec-path-from-shell-variables "GOPATH")
    (exec-path-from-shell-initialize))

  (use-package password-store)
#+end_src

** Platform specifics

Font overrides as well as a few mac specific key binds to make emacs
easier to use. Additionally, in OSX we want to toggle fullscreen
because we want to be in full screen more often than not.

#+begin_src emacs-lisp
  (cond ((eq system-type 'gnu/linux)
         (setq x-gtk-use-system-tooltips nil)
         (set-frame-font "Terminus 8"))

        ((eq system-type 'darwin)
         (setq ns-use-native-fullscreen t
               mac-option-key-is-meta t
               mac-command-key-is-meta nil
               mac-command-modifier 'super
               mac-option-modifier 'meta)

         (set-frame-font "Source Code Pro 10")
         (toggle-frame-fullscreen)))
#+end_src

** File Navigation

Make sure to use ido everywhere

#+begin_src emacs-lisp
  (use-package smex
    :disabled t
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (use-package ido-ubiquitous
      :config
      (ido-ubiquitous-mode 1))
    (use-package ido-vertical-mode
      :config
      (ido-vertical-mode 1))
    (use-package flx-ido
      :config
      (flx-ido-mode 1)))
#+end_src

Make sure we store recent files. This lets helm do fancy things.

#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
#+end_src

Helm is a slightly fancier replacement for ido

#+begin_src emacs-lisp
  (use-package helm
    :demand
    :diminish helm-mode
    :bind
    ("M-x"     . helm-M-x)
    ("C-x b"   . helm-mini)
    ("C-x C-f" . helm-find-files)
    ("C-c o"   . helm-occur)
    ("M-/"     . helm-dabbrev)
    :config
    ; Reverse tab and C-z
    (bind-keys :map helm-map
               ("<tab>" . helm-execute-persistent-action)
               ("C-z"   . helm-select-action))
    (helm-mode 1)
    (helm-autoresize-mode 1)
    (setq helm-ff-file-name-history-use-recentf t
          helm-buffers-fuzzy-matching t
          helm-M-x-fuzzy-match t))
#+end_src

Project based navigation. I would be completely lost without this

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-global-mode)
    (use-package helm-projectile
      :config
      (helm-projectile-on)))
#+end_src

** Programming

Anything programming related goes in here. There are sections for
completion, general config and separate sections for each language.

*** General

Turn on line numbers everywhere aside from a few major modes and
highlight comments with TODO and similar things in them.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)

  (setq indicate-empty-lines t)

  (use-package fic-mode
        :diminish fic-mode
        :config
        (progn (add-hook 'prog-mode-hook 'turn-on-fic-mode)))
#+end_src

*** Completion

#+begin_src emacs-lisp
  (use-package company
    :config
    ;(use-package company-go)
    (setq company-idle-delay 0)
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** Syntax

Turn on syntax checking using flycheck. Because it has so many built
in, in most instances we won't even need to install a plugin.

Note that elpy doesn't have support for flycheck, so we use flymake
for python.

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+end_src

*** Evil Mode

#+begin_src emacs-lisp
  (defun zenburn-color (name)
    (cdr (assoc name zenburn-colors-alist)))

  (use-package evil
    :config
    (zenburn-with-color-variables
      (setq evil-normal-state-cursor `(,(zenburn-color "zenburn-green") box))
      (setq evil-visual-state-cursor `(,(zenburn-color "zenburn-orange") box))
      (setq evil-insert-state-cursor `(,(zenburn-color "zenburn-green") bar))
      (setq evil-replace-state-cursor `(,(zenburn-color "zenburn-red") bar))
      (setq evil-operator-state-cursor `(,(zenburn-color "zenburn-red") hollow))))
#+end_src

*** Go

#+begin_src emacs-lisp
  (use-package go-mode
    :mode "\\.go$"
    :config
    (load "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")
    (add-hook 'go-mode-hook 'go-oracle-mode)
    (add-hook 'before-save-hook 'gofmt-before-save)
    
    (use-package company-go
      :requires company
      :config
      (add-hook 'go-mode-hook (lambda ()
                                (set (make-local-variable 'company-backends) '(company-go))
                                (company-mode)))))
#+end_src

*** Lua

#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua$")
#+end_src

*** Python

Enable elpy and force jedi to be used as the rpc backend so we can
have both rope and jedi installed. Elpy defaults to using the system
'python' binary so we force it to use python2.

#+begin_src emacs-lisp
  (use-package elpy
    :config
    (elpy-enable)
    (elpy-use-cpython "python2")
    (setq elpy-rpc-backend "jedi"))
#+end_src

** Org Mode

Make sure org mode is set up in a manner that doesn't suck. Meaning,
make code blocks act more like their native counterparts, enable fancy
indenting and allow for shift select.

#+begin_src emacs-lisp
  (use-package org
    :diminish org-indent-mode
    :mode ("\\.org$" . org-mode)
    :config
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-indent-mode t
          org-startup-indented t
          org-log-done t
          org-log-done-with-time t
          org-support-shift-select t)

    ;; Make windmove work in org-mode:
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right))
#+end_src

** IRC

#+begin_src emacs-lisp
    (use-package erc
      :disabled t
      :requires
      tls
      erc-menu
      erc-hl-nicks
      znc
      :config
      (setq erc-prompt ">"
            znc-servers `(
                          ("znc.coded.io" "6697" t
                           ((
                             freenode
                             belak/freenode
                             ,(password-store-get "irc/freenode.net")))))))
#+end_src

** Leftovers

#+begin_src emacs-lisp
  ;; Rainbow-mode
  (use-package rainbow-mode
    :commands rainbow-mode)

  ;; Better less support
  ;(require-package 'less-css-mode)

  ;; Golang
  ;(require-package 'go-mode)

  ;; Syntax checking
  ;(require-package 'flycheck)

  ;; Snippets
  ;(require-package 'yasnippet)

#+end_src

** Custom

We still want to be able to have non-public configs, such as for
passwords and what not, so we put them in a separate file and load it,
but ignore errors, for instance if it doesn't exist.

This also makes it so customizations will go to this file and not to
the init.el, which we have version controlled.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src
