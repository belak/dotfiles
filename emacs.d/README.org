* belak's emacs config

This config has been cobbled together from quite a few places.

Most notably, [[https://smf.io/dotfiles][Sean Farley's dotfiles]], [[https://github.com/syl20bnr/spacemacs][Spacemacs]], and various other
sources.

** Setup

The first thing which needs to be loaded is [[https://github.com/jwiegley/use-package][use-package]] so we can
organize everything a little bit better. =use-package= also includes
some useful tools for lazy-loading things when we need them to speed
up the startup time.

Note that we have to explicitly load them because =use-package= can't
handle that yet and we disabled autoloading everything in
=init.el=. =package-ensure-installed= is a convenience method which is
defined in =init.el=.

#+begin_src emacs-lisp
  (package-ensure-installed 'use-package)
  (package-ensure-installed 'req-package)

  (require 'req-package)

  (eval-when-compile
    ;;(defvar use-package-verbose t)
    (require 'use-package))

  (require 'diminish)
  (require 'bind-key)

  (setq use-package-always-ensure t)
#+end_src

** Utilities

Paradox is a replacement for =package-list-packages= offering a few
extra features. Note that we only load it on those commands because
it's something that only really matters when we manually start it up.

#+begin_src emacs-lisp
  (req-package paradox
    :commands
    paradox-list-packages
    paradox-enable
    :config
    (setq paradox-automatically-star t)
    (setq paradox-execute-asynchronously t))
#+end_src

Magit is an amazing git wrapper which lets us do a whole ton of
different things.

#+begin_src emacs-lisp
  (req-package magit)
#+end_src

Make sure undo-tree is enabled.

#+begin_src emacs-lisp
  (req-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode 1))
#+end_src

Load up zx2c4's [[http://www.passwordstore.org/][pass]] utility so we can grab data out of it later.

#+begin_src emacs-lisp
  (req-package password-store)
#+end_src

=guide-key= provides a nice interface for showing prefix commands.

The currently defined prefixes are listed below.

|--------+-----------------------------------------|
| Prefix | Description                             |
|--------+-----------------------------------------|
| C-c    | Generic prefix for quite a few commands |
| C-x x  | Switching of different window modes     |
|--------+-----------------------------------------|

#+begin_src emacs-lisp
  (req-package guide-key
    :diminish guide-key-mode
    :config
    (guide-key-mode 1)
    (setq guide-key/guide-key-sequence '("C-c" "C-x x")
          guide-key/idle-delay 0.5
          guide-key/recursive-key-sequence-flag t))
#+end_src

** Appearance

Settings such as a default font, color scheme and modeline changes.
Note that the font should be overridden later, such as in platform
specific settings.

#+begin_src emacs-lisp
  (req-package zenburn-theme
    :config
    (load-theme 'zenburn t))

  (defvar my/default-frame-font "Monospace 12")

  ;;(setq-default indicate-buffer-boundaries 'left)
  (setq column-number-mode t
        line-number-mode t
        ;;tooltip-use-echo-area t
        tooltip-delay 0
        tooltip-short-delay 0)

  (blink-cursor-mode 0)
#+end_src

=diminish-major-mode= is based off of a snippet from [[https://github.com/sandhu/emacs.d/blob/master/lisp/teppoudo-diminish.el][Achint Sandhu's dotfiles]].

#+begin_src emacs-lisp
  (defmacro diminish-major-mode (mode new-name)
    `(add-hook (intern (concat (symbol-name ,mode) "-hook"))
               '(lambda () (setq mode-name ,new-name))))

  ;; Make the lisp modes a bit shorter
  (diminish-major-mode 'lisp-interaction-mode "λ»")
  (diminish-major-mode 'emacs-lisp-mode "Eλ")
  (diminish-major-mode 'lisp-mode "λ")
#+end_src

=smart-mode-line= is a much cleaner modeline with a few extra features.

#+begin_src emacs-lisp
  (req-package smart-mode-line
    :config
    (setq sml/no-confirm-load-theme t
          sml/theme 'respectful)
    (sml/setup))
#+end_src

Make sure the git gutter is loaded. Note that the fringe doesn't work
in console mode, so we fall back to using the margin.

#+begin_src emacs-lisp
  (req-package diff-hl)
  (defun make-frame-diff-hl (frame)
    (global-diff-hl-mode 0)
    (diff-hl-margin-mode 0)
    (if (display-graphic-p frame)
        (global-diff-hl-mode 1)
      (diff-hl-margin-mode 1)))
#+end_src

Now that we have a few hooks set up, we hook them up and make sure
everything gets called correctly.

#+begin_src emacs-lisp
  (defun my-make-frame-functions (frame)
    (select-frame frame)
    (make-frame-diff-hl frame)
    (set-frame-font my/default-frame-font))
  (add-hook 'after-make-frame-functions 'my-make-frame-functions)
#+end_src

** Basic setup

Set up some smarter defaults, and make sure that some useful
environment vars (like HOME and GOPATH) are copied into the emacs env.

This section was originally based off of [[https://github.com/technomancy/better-defaults/blob/d62a5813fa60d4c9425a795d85f956f0b8a663f8/better-defaults.el][better defaults]] but it has
since grown to be a bit more than that.

First we clean up the interface a bit, removing menus, toolbars and the scrollbar.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Because I often make silly window mistakes, we enable winner-mode so
we can undo them. We also enable windmove which makes it easier to
move between open windows.

#+begin_src emacs-lisp
  (winner-mode 1)

  (windmove-default-keybindings)
#+end_src

Because I want zap-to-char to not nuke the character we're zapping to,
we simply replace it with zap-up-to-char.

#+begin_src emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (global-set-key [remap zap-to-char] 'zap-up-to-char)
#+end_src

Make sure we actually use the clipboard we want because X is annoying
and has something along the lines of 3 clipboard buffers.

#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t)
#+end_src

Disable startup screen and just display the scratch buffer.

#+begin_src emacs-lisp
  (setq initial-buffer-choice t
        inhibit-startup-screen t)
#+end_src

Make sure that things like backups make it into their own directory
and not the current one.

#+begin_src emacs-lisp
  (defvar save-place-file)
  (setq save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
#+end_src

General annoyances.

- Make sure the buffer name shows up with a directory if there are multiple with the same name
- Save the place in the file
- Show parens
- Don't indent with tabs
- Ask y or n, not yes or no
- When matching parens, highlight the region
- Make extra functions show up when searching
- Change yanking locations
- Turn off the damn bell
- Require a final newline on files
- Follow symlinks when we need to
- Make sure to load newest versions of files, even if there are older compiled versions

#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (require 'saveplace)
  (setq-default save-place t)

  (show-paren-mode 1)

  (setq-default indent-tabs-mode nil)

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq show-paren-style 'expression
        apropos-do-all t
        mouse-yank-at-point t
        ring-bell-function 'ignore
        lazy-highlight-initial-delay 0
        require-final-newline t
        vc-follow-symlinks t
        load-prefer-newer t)
#+end_src

Make mouse scrolling and scrolling in general a bit saner (in theory)

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-follow-mouse t
        scroll-step 1)
#+end_src

Load some useful variables from the shell. By default, it grabs HOME,
but we grab GOPATH as well for go.

#+begin_src emacs-lisp
  (req-package exec-path-from-shell
    :config
    (add-to-list 'exec-path-from-shell-variables "GOPATH")
    (exec-path-from-shell-initialize))
#+end_src

** Platform specifics

Font overrides as well as a few mac specific key binds to make emacs
easier to use. Additionally, in OSX we want to toggle fullscreen
because we want to be in full screen more often than not.

#+begin_src emacs-lisp
  (defvar x-gtk-use-system-tooltips)
  (defvar ns-use-native-fullscreen)
  (defvar mac-command-modifier)
  (defvar mac-option-modifier)
  (defvar mac-control-modifier)

  (cond ((eq system-type 'gnu/linux)
         (setq x-gtk-use-system-tooltips nil
               my/default-frame-font "Terminus 8"))

        ((eq system-type 'darwin)
         (setq ns-use-native-fullscreen t
               mac-command-modifier 'meta
               mac-option-modifier 'super
               mac-control-modifier 'control)


         (toggle-frame-fullscreen)))
#+end_src

** File Navigation

Make sure to use ido everywhere. Because we're currently using helm,
this is disabled.

#+begin_src emacs-lisp
  (req-package smex
    :disabled t
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (setq ido-enable-flex-matching t))

  (req-package ido-ubiquitous
    :disabled t
    :config
    (ido-ubiquitous-mode 1))

  (req-package ido-vertical-mode
    :disabled t
    :config
    (ido-vertical-mode 1))

  (req-package flx-ido
    :disabled t
    :config
    (flx-ido-mode 1))
#+end_src

Make sure we store recent files. This lets helm do fancy things.

#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
#+end_src

Helm is a much fancier replacement for ido. There are a few settings
we override (such as reversing C-z and tab, but for the most part the
defaults are fine.

=helm-mini= is used in place of any buffer related helm functions as
we can make it use recentf.

#+begin_src emacs-lisp
  (req-package helm
    :demand
    :diminish helm-mode
    :bind
    ("M-x"     . helm-M-x)
    ("C-x b"   . helm-mini)
    ("C-x C-f" . helm-find-files)
    ("C-c o"   . helm-occur)
    ("M-/"     . helm-dabbrev)
    :config
    ;; Reverse tab and C-z
    (bind-keys :map helm-map
               ("<tab>" . helm-execute-persistent-action)
               ("C-z"   . helm-select-action))
    (helm-mode 1)
    (helm-autoresize-mode 1)

    ;; Turn on fuzzy matching for everything we can
    (custom-set-variables '(helm-recentf-fuzzy-match t)
                          '(helm-completion-in-region-fuzzy-match t)
                          '(helm-buffers-fuzzy-matching t)
                          '(helm-locate-fuzzy-match t)
                          '(helm-M-x-fuzzy-match t)
                          '(helm-semantic-fuzzy-match t)
                          '(helm-imenu-fuzzy-match t)
                          '(helm-apropos-fuzzy-match t)
                          '(helm-lisp-fuzzy-completion t)
                          '(helm-ff-file-name-history-use-recentf t)))

  (req-package helm-ag
    :require helm)
#+end_src

Perspective creates different views to switch between.

#+begin_src emacs-lisp
  (req-package perspective
    :config
    (persp-mode))
#+end_src

Project based navigation. I would be completely lost without this.

#+begin_src emacs-lisp
  (req-package projectile
    :diminish projectile-mode
    :config
    (projectile-global-mode))

  (req-package helm-projectile
    :require (helm projectile)
    :config
    (helm-projectile-on))
#+end_src

** Programming

Anything programming related goes in here. There are sections for
completion, general config and separate sections for each language.

*** General

Set a few things for prog-mode based major modes, such as line numbers
and trailing whitespace.

Note that because =electric-pair-mode= is a global mode we don't
bother putting it into the prog mode hook.

#+begin_src emacs-lisp
  (electric-pair-mode 1)

  (defun my-prog-mode-hook ()
    "Some simple programming settings"
    (interactive)
    (linum-mode 1)
    (setq show-trailing-whitespace t))

  (add-hook 'prog-mode-hook 'my-prog-mode-hook)

  (require 'eldoc)
  (diminish 'eldoc-mode)
#+end_src

=fic-mode= makes sure I actually notice comments with TODO, FIXME and
XXX.

#+begin_src emacs-lisp
  (req-package fic-mode
    :diminish fic-mode
    :config
    (add-hook 'prog-mode-hook 'turn-on-fic-mode))
#+end_src

=rainbow-delimiters= is for more than just parentheses. It works for
brackets as well. This mode makes it easier to see nested delimiters.

#+begin_src emacs-lisp
  (req-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

*** Completion

There are two main completion packages. =auto-complete= is older and a
bit rougher around the edges. =company= is newer and not everything
works with it yet, but at least for me it has a tendency to be more
stable.

#+begin_src emacs-lisp
  (req-package company
    :diminish company-mode
    :config
    (setq company-idle-delay 0)
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** Snippets

Not much to say here. We turn snippets on everywhere.

#+begin_src emacs-lisp
  (req-package yasnippet
    :config
    (setq yas-verbosity 0)
    (yas-global-mode 1))
#+end_src

*** Syntax

Turn on syntax checking using flycheck. Because it has so many built
in, in most instances we won't even need to install a plugin.

#+begin_src emacs-lisp
  (req-package flycheck
    :config
    (global-flycheck-mode))
#+end_src

*** Lisp

Rainbow blocks highlights blocks instead of keywords.

#+begin_src emacs-lisp
  (req-package rainbow-blocks
    :config
    (add-hook 'emacs-lisp-mode-hook 'rainbow-blocks-mode)
    (add-hook 'lisp-interaction-mode-hook 'rainbow-blocks-mode))
#+end_src

*** C/C++

#+begin_src emacs-lisp
  (req-package irony
    :diminish irony-mode
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    ;; replace the `completion-at-point' and `complete-symbol' bindings
    ;; in irony-mode's buffers by irony-mode's function and run the
    ;; autosetup function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async)
      (irony-cdb-autosetup-compile-options))

    (add-hook 'irony-mode-hook 'my-irony-mode-hook))

  (req-package company-irony
    :require (irony company)
    :config
    (defun my-company-irony-mode-hook ()
      (set (make-local-variable 'company-backends) '(company-irony))
      (company-irony-setup-begin-commands))
    (add-hook 'irony-mode-hook 'my-company-irony-mode-hook))

  (req-package flycheck-irony
    :require (irony flycheck)
    :config
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))
#+end_src

*** Go

This enables most of the fairly standard things available in other go
setups. Simple completion and gofmt are the most important of those
features, at least to me.

#+begin_src emacs-lisp
  (req-package go-mode
    :mode "\\.go$"
    :config
    (load "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")
    (add-hook 'go-mode-hook 'go-oracle-mode)
    (add-hook 'before-save-hook 'gofmt-before-save))

  (req-package company-go
    :require (company go-mode)
    :config
    (defun my-company-go-mode-hook ()
      (set (make-local-variable 'company-backends) '(company-go)))
    (add-hook 'go-mode-hook 'my-company-go-mode-hook))
#+end_src

*** Python

Anaconda mode does navigation, docs and auto-completion. Because
that's pretty much all I need, I use this in place of elpy.

#+begin_src emacs-lisp
  (req-package anaconda-mode
    :diminish anaconda-mode
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'eldoc-mode))

  (req-package company-anaconda
    :requires (anaconda-mode company)
    :config
    (add-to-list 'company-backends 'company-anaconda))

  (req-package virtualenvwrapper
    :config
    (setq virtualenv-location (expand-file-name "~/.virtualenvs/")))
#+end_src

*** Web Dev

These are any packages useful for web dev.

Most of this section is just supporting additional formats, however
=rainbow-mode= is here so we can preview the actual colors in css.

#+begin_src emacs-lisp
  (req-package rainbow-mode
    :commands rainbow-mode)

  (req-package web-mode
    :mode
    "\\.jinja$"
    "\\.html$"
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2))

  (req-package js2-mode
    :mode
    "\\.js$"
    :config
    (setq js2-basic-offset 2))

    ;; (set-face-attribute 'js2-error
    ;;                     :inherit 'flycheck-error-list-error
    ;;                     :underline '(:color foreground-color :style wave))
    ;; (set-face-attribute 'js2-warning
    ;;                     :inherit 'flycheck-error-list-warning
    ;;                     :underline '(:color foreground-color :style wave)))

  (req-package less-css-mode
    :mode "\\.less$")
#+end_src

*** Misc

#+begin_src emacs-lisp
  (req-package cmake-mode
    :mode
    "CMakeLists.txt"
    "\\.cmake$")

  (req-package lua-mode
    :mode "\\.lua$")

  (req-package yaml-mode
    :mode "\\.yml$")
#+end_src

** Org Mode

Make sure org mode is set up in a manner that doesn't suck. Meaning,
make code blocks act more like their native counterparts, enable fancy
indenting and allow for shift select.

If the extra require looks hacky, that's because it is. The =:demand=
makes sure the config runs because the package is already loaded to
run this config file. The =:diminish= keyword fails because
org-indent-mode does not exist by the time diminish is called.

#+begin_src emacs-lisp
  (req-package org
    :demand
    :mode ("\\.org$" . org-mode)
    :diminish org-indent-mode
    :init
    (require 'org-indent)
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-log-done t
          org-log-done-with-time t
          org-log-refile t
          org-refile-allow-creating-parent-nodes t
          org-refile-use-outline-path t
          org-support-shift-select t
          org-todo-keywords '("TODO" "STARTED" "WAITING" "|" "DONE")
          org-tag-alist '(("WORK" . ?w)
                          ("HOME" . ?h))
          org-agenda-files '("~/org/work.org"
                             "~/org/home.org"))
    :config
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right))
#+end_src

** IRC

This sets up the connection to my IRC bouncer. There are a few
additional packages that would be useful here, such as znc, but I
still prefer to keep my IRC in weechat, so this remains disabled for
now.

#+begin_src emacs-lisp
    (req-package erc
      :disabled t
      :config
      (setq erc-prompt ">"
            znc-servers `(
                          ("znc.coded.io" "6697" t
                           ((
                             freenode
                             belak/freenode
                             ,(password-store-get "irc/freenode.net")))))))
#+end_src

** Email

#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
  (req-package mu4e
    :defines
    mu4e-maildir
    mu4e-get-mail-command
    mu4e-html2text-command
    mu4e-use-fancy-chars
    mu4e-maildir-shortcuts
    :ensure f
    :config
    (setq mu4e-maildir "~/.mail/coded.io"
          mu4e-get-mail-command "mbsync -a"
          mu4e-html2text-command "elinks -dump"
          mu4e-use-fancy-chars t
          mu4e-maildir-shortcuts '(("/inbox"   . ?i)
                                   ("/drafts"  . ?d)
                                   ("/sent"    . ?s)
                                   ("/archive" . ?a)
                                   ("/spam"    . ?z)
                                   ("/trash"   . ?t))))
#+end_src

** Scratch

This enables persistent scratch buffers. This allows for saving
scratch buffers along with the mode because I prefer to use org-mode.

#+begin_src emacs-lisp
  (req-package persistent-scratch
    :config
    (persistent-scratch-setup-default)
    (persistent-scratch-autosave-mode 1))
#+end_src

** Finalization

- Actually load all the packages
- Select which diff util be used for this frame
- Set the frame font to whatever was selected

Note that req-package-finish needs to be done first so we can actually
use make-frame-diff-hl

#+begin_src emacs-lisp
  (req-package-finish)
  (make-frame-diff-hl (selected-frame))
  (set-frame-font my/default-frame-font)
#+end_src

** Custom

We still want to be able to have non-public configs, such as for
passwords and what not, so we put them in a separate file and load it,
but ignore errors, for instance if it doesn't exist.

This also makes it so customizations will go to this file and not to
the init.el, which we have version controlled.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+end_src

** Tasks

This section is all about stuff I'd like to get into my emacs init but
haven't found the time yet.

*** DONE Decide which git-gutter is better
CLOSED: [2015-06-16 Tue 10:55]
*** DONE Make git-gutter-fringe not run in terminal mode
    CLOSED: [2015-06-20 Sat 11:37]
We can also fall back to the regular git-gutter in this instance
*** DONE Learn yasnippets
    CLOSED: [2015-06-20 Sat 11:37]
*** DONE Setup for golang
CLOSED: [2015-06-16 Tue 10:56]
*** DONE Cleanup [[Leftovers]] section
    CLOSED: [2015-06-20 Sat 12:18]
*** DONE Finish reogranizing
    CLOSED: [2015-06-20 Sat 12:42]
*** DONE Fix org-indent-mode
CLOSED: [2015-06-22 Mon 01:29]
*** DONE Finish documenting
CLOSED: [2015-06-22 Mon 02:22]
*** DONE Make org-mode work well with yasnippets
CLOSED: [2015-06-22 Mon 01:31]
There was nothing to be done for this - tab already works. However,
tab inside code blocks does not currently work. I'm letting this go
for now.
*** DONE Make org-mode work well with windmove
CLOSED: [2015-06-22 Mon 01:35]
Looks like this was done a while back. Guess it's done now.
*** DONE Figure out why show-trailing-whitespace doesn't work
CLOSED: [2015-06-23 Tue 10:45]
Because it becomes buffer-local when set, we have to use setq-default,
not setq.
*** DONE Take a look at =electric-pair-mode=
CLOSED: [2015-07-07 Tue 14:29]
*** DONE Split up larger blocks, such as [[Basic setup]]
CLOSED: [2015-07-07 Tue 14:38]
*** DONE Document "Other Things" in [[Basic setup]]
    CLOSED: [2015-07-09 Thu 19:40]
*** DONE Improve handling of client-server emacs
    CLOSED: [2015-07-18 Sat 03:04]
*** TODO Take a look at =electric-indent-mode=
*** TODO Improve diff-hl 
*** TODO Find workaround for [[Finalization]] section
