* belak's Emacs Config

This config has been cobbled together from quite a few places.

Most notably, [[https://smf.io/dotfiles][smf's dotfiles]], [[https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org][dakrone's dotfiles]], [[https://github.com/syl20bnr/spacemacs][Spacemacs]], among other
sources.

** Core Packages

Portions of this config depend on other components, so we load the
common components here. The only things which should be here are
packages which are needed for the organization of the rest of the file
and stuff which needs to be loaded very early.

*** =page-break-lines=

Display a line as opposed to ^L. This is early in the config file so
most bootstrapped package logs will take advantage of this.

#+begin_src emacs-lisp
  (use-package page-break-lines
    :diminish page-break-lines-mode
    :config (global-page-break-lines-mode 1))
#+end_src


** Various Packages

*** =all-the-icons=

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

*** =multiple-cursors= (disabled)

Add multiple cursors and phi-search (which uses multiple cursors) to
make multi-line editing work a bit better.

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :disabled t
    :config
    (use-package phi-search
      :bind
      ("C-s" . phi-search)
      ("C-r" . phi-search-backward)
      ("M-%" . phi-replace-query)))
#+end_src

*** Other

#+begin_src emacs-lisp
  (use-package project-explorer
    :general
    ("C-c e" 'project-explorer-toggle)
    :config
    (setq pe/omit-gitignore t))
#+end_src

smart-mode-line is a package which aims to provide a better mode-line
with little configuration. I've tried to use powerline (and making my
own small framework) and it just involved too much work to maintain a
small feature.

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :disabled t
    :config
    (setq sml/no-confirm-load-theme t
          sml/shorten-directory t
          sml/theme 'respectful)
    (sml/setup))
#+end_src

Dim the font color of text in surrounding paragraphs.

#+begin_src emacs-lisp
  (use-package focus)
#+end_src

** Other Settings

*** Legacy


popwin tries to make the behavior of compilation buffers, search
buffers, etc, a bit more sane.

#+begin_src emacs-lisp
  (use-package popwin
    :ensure t
    :bind (("C-c P" . popwin:popup-last-buffer))
    :config
     ;; also add ag, flycheck, and occur to pop
    (add-to-list 'popwin:special-display-config `"*ag search*")
    (add-to-list 'popwin:special-display-config `"*ripgrep-search*")
    (add-to-list 'popwin:special-display-config `"*Flycheck errors*")
    (add-to-list 'popwin:special-display-config `"*Occur*")

    ;; don't auto-select the compile process buffer as it's only for information
    (add-to-list 'popwin:special-display-config `("*Compile-Log*" :noselect t))

    ;; enable
    (popwin-mode))
#+end_src

These are old settings this need to be reorganized.

#+begin_src emacs-lisp
  ;; TODO: This section is pretty much everything that didn't fit nicely
  ;; into a use-package block. It would be nice to refactor this a bit.

  ;; We pick a super generic fallback so it should work everywhere.
  (defvar belak/frame-font "Monospace 12")
  (cond ((linux-p)
         ;; On linux, we just fall back to the default "monospace" font
         ;; because we can set it the same everywhere.
         (setq belak/frame-font nil
               x-gtk-use-system-tooltips nil))
        ((osx-p)
         (setq belak/frame-font "Source Code Pro 12")))

  ;; We want to ensure the font is set after the window frame is
  ;; created.
  (add-hook 'after-make-window-system-frame-hooks
            (lambda () (when belak/frame-font (set-frame-font belak/frame-font))))

  (setq-default tab-width 4)

  ;; Ensure all trailing whitespace is removed
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Custom

We still want to be able to have non-public configs, such as for
passwords and what not, so we put them in a separate file and load
it, but ignore errors, for instance if it doesn't exist. This has
the added advantage of making it so customizations will go to this
file and not to init.el, which is version controlled.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+end_src

** TODO Tasks [0/18]

This section is all about stuff I'd like to get into my emacs init but
haven't found the time yet.

- [ ] Fix the strange issue with js2-mode faces in base16
- [ ] Replace all :bind blocks with :general blocks
- [ ] Clean up Legacy section
- [ ] Add some ag bindings (really, add back ag-support)
- [ ] Look into eldoc mode
- [ ] Learn =paredit=
- [ ] Look into avy/ivy (can probably grab from smf)
- [ ] Look into slime for elisp
- [ ] Set up ediff like https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org#ediff
- [ ] Set up smartparens like https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org#smartparens
- [ ] Set up anzu like https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org#anzu
- [ ] Find a way to bootstrap go-oracle
- [ ] Move away from org-mode config
- [ ] Grab goto-chr from smf
- [ ] Look at ripgrep to maybe replace ag
- [ ] Whole-line-or-region-mode?
- [ ] dwim?
- [ ] hungry-delete
- [ ] dumb-jump
- [ ] guide-key?
